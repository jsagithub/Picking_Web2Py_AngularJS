(dp1
S'output'
p2
S"<type 'exceptions.ValueError'> line 3 of the docstring for add_pick lacks blank after >>>: '>>>barcodes=db((db.pickings)).select(db.pickings.barcode).first()'"
p3
sS'layer'
p4
S'/home/jmsa/Documents/web2py/applications/pikingangular/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\nimport gluon.contrib.simplejson\n\ndef get_pick(pick_id):  \n    """\n    App need to have at least 1 barcode\n    >>> len(db(db.pickings.id==None).select()) ### test NULL\n    0\n    """  \n    pick= db(db.pickings.id==pick_id).select().first().as_dict()\n    return pick\n\ndef add_pick():\n    """\n        len barcode need to be 13\n    >>>barcodes=db((db.pickings)).select(db.pickings.barcode).first()\n    >>>len(barcodes.barcode)\n    13 \n    """\n    new_pick=gluon.contrib.simplejson.loads(request.body.read())\n    pick_id=db.pickings.validate_and_insert(barcode=new_pick[\'barcode\'])\n    new_pick=get_pick(pick_id)\n    return  gluon.contrib.simplejson.dumps(dict(newPick=new_pick))\n\ndef index():\n    rows = db(db.pickings).select().as_list()\n    return dict(pick_list=gluon.contrib.simplejson.dumps(rows))\n\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/bulk_register\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    also notice there is http://..../[app]/appadmin/manage/auth to allow administrator to manage users\n    """\n    return dict(form=auth())\n\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\ndef _TEST():\n    import doctest, sys, cStringIO, types, cgi, gluon.fileutils\n    if not gluon.fileutils.check_credentials(request):\n        raise HTTP(401, web2py_error=\'invalid credentials\')\n    stdout = sys.stdout\n    html = \'<h2>Testing controller "%s.py" ... done.</h2><br/>\\n\' \\\n        % request.controller\n    for key in sorted([key for key in globals() if not key in __symbols__+[\'_TEST\']]):\n        eval_key = eval(key)\n        if type(eval_key) == types.FunctionType:\n            number_doctests = sum([len(ds.examples) for ds in doctest.DocTestFinder().find(eval_key)])\n            if number_doctests>0:\n                sys.stdout = cStringIO.StringIO()\n                name = \'%s/controllers/%s.py in %s.__doc__\' \\\n                    % (request.folder, request.controller, key)\n                doctest.run_docstring_examples(eval_key,\n                    globals(), False, name=name)\n                report = sys.stdout.getvalue().strip()\n                if report:\n                    pf = \'failed\'\n                else:\n                    pf = \'passed\'\n                html += \'<h3 class="%s">Function %s [%s]</h3>\\n\' \\\n                    % (pf, key, pf)\n                if report:\n                    html += CODE(report, language=\'web2py\', \\\n                        link=\'/examples/global/vars/\').xml()\n                html += \'<br/>\\n\'\n            else:\n                html += \\\n                    \'<h3 class="nodoctests">Function %s [no doctests]</h3><br/>\\n\' \\\n                    % (key)\n    response._vars = html\n    sys.stdout = stdout\n_TEST()\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/jmsa/Documents/web2py/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/home/jmsa/Documents/web2py/applications/pikingangular/controllers/default.py", line 101, in <module>\n  File "/home/jmsa/Documents/web2py/applications/pikingangular/controllers/default.py", line 77, in _TEST\n  File "/usr/lib/python2.7/doctest.py", line 926, in find\n    self._find(tests, obj, name, module, source_lines, globs, {})\n  File "/usr/lib/python2.7/doctest.py", line 968, in _find\n    test = self._get_test(obj, name, module, globs, source_lines)\n  File "/usr/lib/python2.7/doctest.py", line 1052, in _get_test\n    filename, lineno)\n  File "/usr/lib/python2.7/doctest.py", line 671, in get_doctest\n    return DocTest(self.get_examples(string, name), globs,\n  File "/usr/lib/python2.7/doctest.py", line 685, in get_examples\n    return [x for x in self.parse(string, name)\n  File "/usr/lib/python2.7/doctest.py", line 647, in parse\n    self._parse_example(m, name, lineno)\n  File "/usr/lib/python2.7/doctest.py", line 705, in _parse_example\n    self._check_prompt_blank(source_lines, indent, name, lineno)\n  File "/usr/lib/python2.7/doctest.py", line 792, in _check_prompt_blank\n    line[indent:indent+3], line))\nValueError: line 3 of the docstring for add_pick lacks blank after >>>: \'>>>barcodes=db((db.pickings)).select(db.pickings.barcode).first()\'\n'
p11
s.